package components

import (
	"fmt"
	"gitlab.unjx.de/flohoss/godash/services"
)

templ Weather(weather *services.Weather) {
	<div class="flex items-center justify-between select-none gap-5">
		<div class="hover-box flex items-center justify-between gap-2 min-w-[20rem] w-full lg:w-auto">
			<span id="weatherIcon" class={ "flex-shrink-0 size-30", weather.Current.Icon }></span>
			<div class="grid justify-items-end">
				<div class="font-semibold text-primary text-4xl" id="weatherTemp">{ weather.Current.Temperature }</div>
				<div class="grid justify-items-end gap-1 text-xs">
					<div class="flex items-center gap-1">
						<span class="flex-shrink-0 icon-[bi--thermometer-half]"></span>
						<div id="weatherDescription" class="extra-info">{ weather.Current.Apparent }</div>
					</div>
					<div class="flex items-center gap-1">
						<span class="flex-shrink-0 icon-[bi--droplet-fill]"></span>
						<div id="weatherHumidity" class="extra-info">{ weather.Current.Humidity }</div>
					</div>
					<div class="flex items-center gap-4">
						<div class="hidden sm:flex items-center gap-1">
							<span class="flex-shrink-0 size-4 icon-[bi--sunrise-fill]"></span>
							<div id="weatherSunrise" class="extra-info">{ weather.Current.Sunrise }</div>
						</div>
						<div class="hidden sm:flex items-center gap-1">
							<span class="flex-shrink-0 size-4 icon-[bi--sunset-fill]"></span>
							<div id="weatherSunset" class="extra-info">{ weather.Current.Sunset }</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="hidden lg:flex items-center gap-4">
			for id, day := range weather.Forecast {
				<div class="hover-box grid justify-items-end gap-2 min-w-[6rem]">
					<span id={ fmt.Sprintf("icon-day-%d", id+1) } class={ "flex-shrink-0 size-14", day.Icon }></span>
					<div class="grid justify-items-end">
						<div class="text-xs">{ day.Day }</div>
						<div id={ fmt.Sprintf("max-day-%d", id+1) } class="font-semibold text-primary">{ day.TemperatureMax }</div>
						<div id={ fmt.Sprintf("min-day-%d", id+1) } class="text-xs">{ day.TemperatureMin }</div>
					</div>
				</div>
			}
		</div>
	</div>
	<script>
		let weatherSSESource = null;
		addEventListener('beforeunload', () => {
	  		weatherSSESource && weatherSSESource.close();
		});
		weatherSSESource = new EventSource('/sse?stream=weather');
		weatherSSESource.onmessage = (e) => {
			const parsed = JSON.parse(e.data);
			console.log(parsed);
			replaceWeather(parsed);
		};

		function replaceWeather(parsed) {
		const weatherIcon = document.getElementById('weatherIcon');
			weatherIcon.className.split(' ').forEach(function(className) {
				if (className.startsWith('icon-')) {
					weatherIcon.classList.remove(className);
				}
			});
			weatherIcon.classList.add(parsed.current.icon);
			document.getElementById('weatherTemp').innerText = parsed.current.temperature;
			document.getElementById('weatherDescription').innerText = parsed.current.apparent;
			document.getElementById('weatherHumidity').innerText = parsed.current.humidity;
			document.getElementById('weatherSunrise').innerText = parsed.current.sunrise;
			document.getElementById('weatherSunset').innerText = parsed.current.sunset;

			parsed.forecast.forEach(function(day, index) {
				const icon = document.getElementById('icon-day-' + (index + 1));
				icon.className.split(' ').forEach(function(className) {
					if (className.startsWith('icon-')) {
						icon.classList.remove(className);
					}
				});
				icon.classList.add(day.icon);
				document.getElementById('max-day-' + (index + 1)).innerText = day.temperature_max;
				document.getElementById('min-day-' + (index + 1)).innerText = day.temperature_min;
			})
		}
	</script>
}
