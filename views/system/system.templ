package system

import "gitlab.unjx.de/flohoss/godash/services"

templ System() {
	<canvas id="chart" class="w-full h-20 block"></canvas>
}

templ RamAndDiskBadges(system *services.Buffer) {
	<div class="absolute -top-2 left-2 sm:left-auto sm:right-6 lg:right-8 xl:right-10 distance font-mono whitespace-nowrap">
		<div class="badge badge-sm distance">
			<span class="shrink-0 icon-[bi--memory]"></span>
			<span id="current-ram">{ system.RAM }</span>
		</div>
		<div class="badge badge-sm distance">
			<span class="shrink-0 icon-[bi--hdd]"></span>
			<span id="current-disk">{ system.Disk }</span>
		</div>
		<div class="hidden sm:flex badge badge-sm distance">
			<span class="shrink-0 icon-[bi--cpu]"></span>
			<span id="current-cpu">{ system.CPUStr }</span>
		</div>
	</div>
}

templ Script(system *services.Buffer) {
	<script>
        function getCSSColor() {
            return getComputedStyle(document.documentElement)
                .getPropertyValue('--color-primary')
                .trim();
        }

        const initialData = {{ system }};

        const formattedInitialData = initialData.cpu.map(c => ({
            x: c.time,
            y: c.percent
        }));

        const ctx = document.getElementById('chart').getContext('2d');
        ctx.imageSmoothingEnabled = true;
        let latestCPU;

        const chart = new Chart(ctx, {
            type: 'line',
            data: { datasets: [{ data: formattedInitialData, borderColor: getCSSColor(), backgroundColor: 'transparent', pointRadius: 0, tension: 0.5, borderWidth: 2 }] },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: false,
                devicePixelRatio: window.devicePixelRatio,
                plugins: { legend: { display: false }, tooltip: { enabled: false } },
                scales: { 
                    x: { type: 'realtime', realtime: { duration: 57000, refresh: 1000, delay: 2000, onRefresh: chart => { if (latestCPU) chart.data.datasets[0].data.push({x: latestCPU.time, y: latestCPU.percent}); } }, ticks: { display: false }, grid: { drawTicks: false, drawBorder: false, drawOnChartArea: false } },
                    y: { min: -5, max: 105, ticks: { display: false }, grid: { drawTicks: false, drawBorder: false, drawOnChartArea: false } }
                }
            },
            plugins: [ChartStreaming]
        });

        const systemSSESource = new EventSource('/sse?stream=system');
        systemSSESource.onmessage = (event) => {
            const data = JSON.parse(event.data);
            latestCPU = data.cpu;

            document.getElementById('current-ram').innerText = data.ram;
            document.getElementById('current-disk').innerText = data.disk;
            document.getElementById('current-cpu').innerText = data.cpu_str;
        };
    </script>
}
